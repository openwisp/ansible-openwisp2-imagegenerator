- name: "Remove {{ openwisp2fw_generator_dir }} (cleanup)"
  file:
    path: "{{ openwisp2fw_generator_dir }}"
    state: absent

- name: "Create {{ openwisp2fw_generator_dir }}"
  file:
    path: "{{ openwisp2fw_generator_dir }}"
    state: directory

- name: Create find scripts on server
  template:
    src: generator/find.sh.jinja2
    dest: "{{ openwisp2fw_source_dir }}/find-{{ item }}.sh"
    mode: 0755
  with_items: "{{ openwisp2fw_source_archs }}"

- name: Call find scripts
  shell: ./find-{{ item }}.sh chdir={{ openwisp2fw_source_dir }}
  with_items: "{{ openwisp2fw_source_archs }}"

- name: Extract copies of imagebuilder archives
  unarchive:
    copy: false
    src: "{{ openwisp2fw_generator_dir }}/{{ item }}.gz"
    dest: "{{ openwisp2fw_generator_dir }}"
  with_items: "{{ openwisp2fw_source_archs }}"

- name: Remove copies of imagebuilder archives
  shell: "rm {{ openwisp2fw_generator_dir }}/{{ item }}.gz"
  with_items: "{{ openwisp2fw_source_archs }}"

- name: Rename ImageBuilder dirs to just the name of their corresponding arch
  shell: "mv {{ openwisp2fw_generator_dir }}/*-{{ item }}-* {{ openwisp2fw_generator_dir }}/{{ item }}"
  with_items: "{{ openwisp2fw_source_archs }}"

- name: Create a "files" directory for each organization
  file:
    path: "{{ openwisp2fw_generator_dir }}/files/{{ item.name }}"
    state: directory
  with_items: "{{ openwisp2fw_organizations }}"

- name: Copy general role files to each organization
  copy:
    dest: "{{ openwisp2fw_generator_dir }}/files/{{ item.name }}"
    src: files/
  with_items: "{{ openwisp2fw_organizations }}"

# the following task checks whether <playbook-dir>/files/ exists
# and stores the result of this check in a variable
- name: check local /files dir
  local_action: stat path={{ playbook_dir }}/files
  become: false
  register: file_dir

# perform action only if playbook_dir contains a file directory
- name: Copy general playbook files to each organization
  copy:
    dest: "{{ openwisp2fw_generator_dir }}/files/{{ item.name }}"
    src: "{{ playbook_dir }}/files/"
  with_items: "{{ openwisp2fw_organizations }}"
  when: file_dir.stat.exists == true

- name: /etc/config/openwisp
  template:
    dest: "{{ openwisp2fw_generator_dir }}/files/{{ item.name }}/etc/config/openwisp"
    src: uci/openwisp.jinja2
  with_items: "{{ openwisp2fw_organizations }}"
  when: item.openwisp is defined

- name: Encrypt luci passwords
  shell: "mkpasswd -5 {{ item.luci_openwisp.password }}"
  args:
    chdir: "{{ openwisp2fw_source_dir }}"
  with_items: "{{ openwisp2fw_organizations }}"
  register: encrypted_luci_passwords
  when: item.luci_openwisp is defined and item.luci_openwisp.password is defined

- name: /etc/config/luci_openwisp
  template:
    dest: "{{ openwisp2fw_generator_dir }}/files/{{ item.item.name }}/etc/config/luci_openwisp"
    src: uci/luci_openwisp.jinja2
  with_items: "{{ encrypted_luci_passwords.results }}"
  # avoid failure if not using this feature
  when: encrypted_luci_passwords is defined and encrypted_luci_passwords.results is defined and item.item.luci_openwisp.password

- name: Encrypt root passwords
  shell: "mkpasswd -5 {{ item.root_password }}"
  args:
    chdir: "{{ openwisp2fw_source_dir }}"
  with_items: "{{ openwisp2fw_organizations }}"
  register: encrypted_passwords
  when: item.root_password is defined

- name: /etc/shadow
  template:
    dest: "{{ openwisp2fw_generator_dir }}/files/{{ item.item.name }}/etc/shadow"
    src: generator/shadow.jinja2
    mode: 0600
  with_items: "{{ encrypted_passwords.results }}"
  # avoid failure if not using this feature
  when: encrypted_passwords is defined and encrypted_passwords.results is defined and item.item.root_password is defined

# the following task loops over each organization and checks whether
# <playbook-dir>/organizations/<organization-name>/ exists
# and stores the result of this check in a variable
- name: check local /organizations dir
  local_action: stat path={{ playbook_dir }}/organizations/{{ item.name }}
  become: false
  register: organization_dirs
  with_items: "{{ openwisp2fw_organizations }}"

# perform action only if corresponding organization directory exist
# eg:
#   if <playbook-dir>/organizations/<organization-name> exists
#   then include its contents
- name: Copy organization specific files stored in playbook directory
  copy:
    dest: "{{ openwisp2fw_generator_dir }}/files/{{ item.item.name }}"
    src: "{{ playbook_dir }}/organizations/{{ item.item.name }}/"
  with_items: "{{ organization_dirs.results }}"
  when: item.stat.exists == true
